//
// Copyright (C) 2004 Andras Varga
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//

package inet.networklayer.wiseroute;

import inet.common.MessageDispatcher;
import inet.networklayer.arp.generic.GenericARP;
import inet.networklayer.common.EchoProtocol;
import inet.networklayer.contract.INetworkLayer;


//
// This module provides a simple network layer.
//
module WiseRouteNetworkLayer like INetworkLayer
{
    parameters:
        string interfaceTableModule;
        *.interfaceTableModule = default(absPath(interfaceTableModule));
        @display("i=block/fork;bgb=382,240");

    gates:
        input ifIn @labels(INetworkDatagram);
        output ifOut @labels(INetworkDatagram);
        input transportIn @labels(ITransportPacket/down);
        output transportOut @labels(ITransportPacket/up);

    submodules:
        arp: GenericARP {
            @display("p=129,169");
        }
        np: WiseRoute {
            parameters:
                arpModule = "^.arp";
                @display("p=223,177;q=queue");
        }
        dp: MessageDispatcher {
            parameters:
                @display("b=300,5,,,,1;p=223,100");
        }
        echo: EchoProtocol {
            parameters:
                @display("p=129,42");
        }

    connections allowunconnected:
        dp.upperLayerIn++ <-- { @display("m=n"); } <-- transportIn;
        dp.upperLayerOut++ --> { @display("m=n"); } --> transportOut;

        dp.upperLayerOut++ --> echo.localIn;
        dp.upperLayerIn++ <-- echo.sendOut;

        np.transportOut --> dp.lowerLayerIn++;
        np.transportIn <-- dp.lowerLayerOut++;

        ifIn --> { @display("m=s"); } --> np.queueIn;
        np.queueOut --> { @display("m=s"); } --> ifOut;
}
